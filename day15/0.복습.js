/*
  JS 데이터
    1. 문자 : '' , "" , ``
       <선언> let 변수명 = '안녕'
       <호출> 변수명 
       <수정> 변수명 = '자바'
    2. 숫자
    3. 불리언/논리 : true , false 
    4. undefined
    5. 배열(객체) : [ 데이터 , 데이터 , 데이터 ]
      - 여러 데이터를 하나의 데이터로 묶은 형식 , 저장 순서(인덱스)
      <선언> let 변수명 = [ '안녕' , 123 , true , { } ]
      <호출>      1. 변수명  2.변수명[인덱스]
      <수정>      1. 변수명 = [ '자바' , 456 , false , { } ]    2. 변수명[인덱스] = false 
      <삽입삭제>  1. 변수명.push( )    2. 변수명.splice(  )    
      <검색>      1. 변수명.index( )  2. for( let i = 0 ; i<변수명.length ; i++ ){ }   

    6. 함수(객체) : function (){ }
      - 여러 실행문;를 하나로 묶은 형식 , 1.선언적 2.익명 3.화살표
      <선언> function 함수명( 매개변수 ) { 실행문; return; }
      <호출> JS : 함수명( );      HTML : <마크업 이벤트속성="함수명()">

    7. 객체 : { 속성명 : 데이터 , 속성명 : 데이터 , 속성명 : 데이터 } 
      - 여러 데이터를 속성명 과 데이터를 한쌍으로 이루어진 여러 쌍을 묶은 형식 , 속성명
      <선언> let 변수명 = { 이름 : '유재석' , 나이 : 40 }
      <호출> 1. 변수명 2. 변수명.이름 3.변수명['이름']
      <수정> 1. 변수명.이름 = '강호동'
      <속성삭제> 1. delete 변수명.속성명
      <속성추가> 1. 변수명.새로운속성명 = 데이터
      
  - JS 데이터 1개 저장하는 곳 : let , const

  - 라이브러리 / 미리 만들어진 함수 또는 객체 
  1. 내장 라이브러리( 별도 설치가 없어도 사용 가능한 함수 또는 객체 )
    1. console (객체 )
      log ( 속성 )      console.log( )
    2. Math ( 객체 )
      random( 속성 )    Math.random( )
    3. 배열 ( 객체 )
      배열.push( ) , 배열.splice() , 배열.index( ) , 배열.length 
    3. 문자 ( 잠시 객체로 승급 )
      문자.split( ) , 문자.toLocaleString( )
    4. 객체 없이 함수만 
      alert( ) , confirm( ) , prompt( ) , parseInt( ) , Number( ) ,
    5. 클래스( 미리 구성한 객체 틀/설계 )
      let 변수명 = new Date();     : 현재 날짜와 시간 객체 반환
    6. *DOM 객체
    D ( document = 문서 = HTML = 현재 JS가 실행된 현재 HTML )
    O ( Object = 객체 )
    M ( Model = 모형/본보기 )
      = 문서 객체 모형 => HTML은 객체 언어가 아니다 => JS가 HTML의 모든 요소[<마크업>]을 객체화
*/
